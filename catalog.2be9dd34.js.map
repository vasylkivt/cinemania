{"mappings":"qhBAAAA,EAAA,SAAAC,SAA8CC,KAAKC,MAAM,4R,4CCAlD,MAAMC,EAAoBC,GACxB,kGAGgBA,2C,MCJzBC,EAAiB,IAAAC,IAAoBP,EAAA,SAAAQ,QAA6C,SAAQC,OAAAC,KAAAC,KAAEC,WCA5F,MAaaC,EAAS,C,OAbP,KACbC,SAASC,KAAKC,mBACZ,YACA,6EAGD,E,QAGa,KACdF,SAASG,cAAc,oBAAoBC,QAAQ,G,8BCArD,MAAMC,EAAgB,IAAI,EAAAC,EAAAC,UAECC,WACzB,IACET,EAAOU,SACP,MAAMC,QAAEA,SAAkBL,EAAcM,qBAAqB,OACvDC,EAAcF,EAAQG,MAAM,EAAG,GAErCb,SAASG,cAAc,oBAAoBW,UACzCC,EAAsBH,IACxB,EAAAI,EAAAC,iCAEA,MAAMC,EAAiBlB,SAASG,cAAc,0BACxCgB,EAAkBnB,SAASG,cAAc,2BAE/C,IAAIiB,OACF,mBACAC,EAAaH,EAAgBC,G,CAE/B,MAAOG,GACPC,QAAQC,IAAI,SAAUF,E,CAExBvB,EAAO0B,SAAS,EAGlBC,GAEA,MAAML,EAAe,CAACH,EAAgBC,KAAqB,CACzDQ,OAAQ,OACRC,MAAM,EACNC,SAAU,CACRC,SAAS,GAEXC,SAAU,CACRC,MAAO,IACPC,sBAAsB,EACtBC,mBAAmB,GAErBC,GAAI,CACFC,iBAAiBC,EAAGC,EAAMC,GACxBrB,EAAesB,MAAMC,YAAY,aAAc,EAAIF,GACnDpB,EAAgBuB,YAAc,GAAGC,KAAKC,KAAKN,EAAO,O,GAGtDO,YAAY,EACZC,WAAY,CACVC,QAAQ,EACRC,cAAc,EACdC,aAAc,GACdC,YAAa,KAEfC,WAAY,CACVC,GAAI,qBACJC,WAAW,KAITtC,EAAwBuC,GAAU,mDAG9BA,EAAOC,KAAIC,GAASC,EAAsBD,KAAQE,KAAK,gPAW3DD,EAAwB,EAACE,GAC7BA,EAAEC,cACFA,EAAaC,eACbA,EAAcC,SACdA,EAAQC,aACRA,MACI,8FA6BYC,EAzBCJ,EAyBeK,EAzBAL,EA0BT,OAAnBI,GAA4BA,EAIzB,wDACmCA,sDACDA,uEAEOA,gGAEnCC,KATJ,QAAQC,EAAA1E,YAAoByE,0HAvBHJ,kEAEtBvE,EAAiC,GAAfyE,yDAEED,8GAIUH,2KAIAA,wJAS5C,IAAkBK,EAAgBC,CAFvB,EClHX3D,EAAApB,EAAA,S,MCAAiF,EAAiB,IAAA1E,IAAoBP,EAAA,SAAAQ,QAA6C,SAAQC,OAAAC,KAAAC,KAAEC,WCGrF,MAAMsE,EAAwB,CAACC,EAAWC,IAC/CD,EACGd,KACC,EAACI,GACCA,EAAEY,YACFA,EAAWC,UACXA,EAASX,eACTA,EAAcY,aACdA,EAAYV,aACZA,MACI,gDAC2BJ,qDA2CvBe,EAzCGH,EAyCKN,EAzCQJ,EA0Cf,OAAXa,GAAoBA,EAIjB,uDAE6BA,gDACAA,sEAEQA,sHAElCT,KAVD,QAAQC,EAAAC,YAAuBF,+LArCGJ,sEAa7C,SAAkBc,EAAUL,GAC1B,IAAIM,EAAQ,GACa,IAArBD,GAAUE,OACZD,EAAQ,gBACCD,IACTC,EAMJ,SAAsBE,EAAKR,GACzB,IACE,OAAOQ,EAAIvB,KAAII,IACb,MAAMoB,EAAQT,EAAWU,MAAKJ,GAASA,EAAMjB,KAAOA,IACpD,OAAOoB,EAAQA,EAAME,KAAO,IAAI,G,CAElC,MAAO3D,GACP,MAAO,CAAC,gB,EAbA4D,CAAaP,EAAUL,GAAYzD,MAAM,EAAG,GAAG6C,KAAK,MAG9D,OAAOkB,C,CAnBSO,CAASX,EAAWF,QAAiBG,EAAa5D,MAAM,EAAG,wFAG7DvB,EAAiC,GAAfyE,qEA8BlC,IAAgBW,EAAQT,CA1BhB,IAEHP,KAAK,IF1BV,MAAM0B,EAAgB,IAAI,EAAA9E,EAAAC,UAEpB8E,EAAmBrF,SAASG,cAAc,0BAC1CmF,EAAkBtF,SAASG,cAC/B,wCAKFK,eAAe+E,EAAaC,GAC1B,IAGE,GAFAzF,EAAOU,SAEQ,gBAAX+E,EAA0B,CAC5B,MAAMC,QAAiBL,EAAczE,qBAAqB,QACpD2D,QAAmBc,EAAcM,gBACvCC,EAAcF,EAAUnB,E,MACnB,GAAe,iBAAXkB,EAA2B,CACpC,MAAMC,QAAiBL,EAAcQ,qBAC/BtB,QAAmBc,EAAcM,gBACvCC,EAAcF,EAAUnB,E,EAE1B,MAAOhD,GACPC,QAAQC,IAAI,SAAUF,E,CAExBvB,EAAO0B,S,CAlBT8D,EAAa,eAqBb,MAAMI,EAAgB,CAACF,EAAUnB,KAC/B,MAAM5D,QAAEA,EAASmF,KAAMC,EAAWC,YAAEA,EAAWC,cAAEA,GAAkBP,EAE7DQ,EAAsBjG,SAASG,cAAc,0BAEnD,GAAuB,IAAnBO,EAAQmE,OAGV,OAFAoB,EAAoBnF,UAAY,QAChCuE,EAAiBvE,UGzCnB,mMH6CIgF,EAAcC,GAChBE,EAAoBnF,UAAY,uGAChCd,SACGG,cAAc,iBACd+F,iBAAiB,QAASC,IAE7BF,EAAoBnF,UAAY,GAGP,IAAvBsE,EAAcS,OAAYR,EAAiBvE,UAAY,IAE3DuE,EAAiBnF,mBACf,YACAkE,EAAsB1D,EAAS4D,GAChC,EAGG8B,EAASpG,SAASG,cAAc,4BAChCkG,MAAEC,EAAKC,UAAEC,EAASC,OAAEC,GAAWN,EAAOO,SAkC5C,SAASR,IACPf,EAAcS,MAAQ,EACM,KAAxBT,EAAciB,MAChBd,EAAa,eAEbA,EAAa,e,CArCjBe,EAAMJ,iBAAiB,SAAS,KAC9BZ,EAAgBsB,UAAUxG,OAAO,aACjCoG,EAAUK,YAAcP,EAAMQ,MACV,KAAhBR,EAAMQ,OAAcxB,EAAgBsB,UAAUG,IAAI,YAAY,IAGpEzB,EAAgBY,iBAAiB,SAAS,KACxCZ,EAAgBsB,UAAUG,IAAI,aAC9BT,EAAMQ,MAAQ,GACdN,EAAUK,YAAc,MAAM,IAGhCT,EAAOF,iBAAiB,UAExB,SAAuBc,GAIrB,GAHAA,EAAEC,iBACF7B,EAAcS,KAAO,EAGnBT,EAAciB,QAAUC,EAAMQ,OAC9B1B,EAAc8B,OAASR,EAAOI,MAE9B,OAEF,GAA2B,KAAvBR,EAAMQ,MAAMK,OAAe,OACV,KAAjBT,EAAOI,QAAc1B,EAAc8B,KAAOR,EAAOI,OAErD1B,EAAciB,MAAQC,EAAMQ,MAE5BvB,EAAa,e","sources":["node_modules/@parcel/runtime-js/lib/runtime-0f1633eb22fa2444.js","src/js/components/rating-stars.js","node_modules/@parcel/runtime-js/lib/runtime-a13326a1c56907f8.js","src/js/components/loader.js","src/js/pages/catalog/hero.js","src/js/pages/catalog/catalog.js","node_modules/@parcel/runtime-js/lib/runtime-97fc02d64485cc87.js","src/js/components/movie-list.js","src/js/components/error-message-search.js"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"9NLH0\\\":\\\"catalog.2be9dd34.js\\\",\\\"jMrmu\\\":\\\"default_horizontal_poster_path.736ae198.jpg\\\",\\\"18ZJf\\\":\\\"default-image-for-movie.30fb3bbd.webp\\\",\\\"7mVsD\\\":\\\"catalog.ba862f98.css\\\",\\\"kJsjH\\\":\\\"catalog.56cc4165.js\\\"}\"));","export const ratingStarsMarkup = rating => {\n  return `\n  <div class=\"rating-container\">\n    <div class=\"star-empty\"></div>\n    <div style=\" width:${rating}%;\"  class=\"star-full\"></div>\n  </div>`;\n};\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"jMrmu\")).toString();","const onShow = () => {\n  document.body.insertAdjacentHTML(\n    'beforeend',\n    `<div class=\"backdrop-loader\">\n  <div class=\"lds-dual-ring\"></div>\n</div>`\n  );\n};\n\nconst onClose = () => {\n  document.querySelector('.backdrop-loader').remove();\n};\n\nexport const Loader = { onShow, onClose };\n","import { ratingStarsMarkup } from '../../components/rating-stars';\nimport defaultImg from '../../../images/default_horizontal_poster_path.jpg';\nimport { Loader } from '../../components/loader';\nimport { TMDB_API } from '../../api/themoviedbAPI';\n\nimport { addEventListenerByOpenTrailer } from '../../services/open-movie-trailer';\n\n// import '~/node_modules/swiper/swiper-bundle.min.js';\n// import Swiper from 'swiper';\n\nconst themoviedbAPI = new TMDB_API();\n\nconst getTrendMovieOfDay = async () => {\n  try {\n    Loader.onShow();\n    const { results } = await themoviedbAPI.getTrendMovieByParam('day');\n    const correctList = results.slice(0, 5);\n\n    document.querySelector('.js-hero-wrapper').innerHTML =\n      createMarkupMovieList(correctList);\n    addEventListenerByOpenTrailer();\n\n    const progressCircle = document.querySelector('.autoplay-progress svg');\n    const progressContent = document.querySelector('.autoplay-progress span');\n\n    new Swiper(\n      '.js-hero-wrapper',\n      swiperOption(progressCircle, progressContent)\n    );\n  } catch (error) {\n    console.log('error:', error);\n  }\n  Loader.onClose();\n};\n\ngetTrendMovieOfDay();\n\nconst swiperOption = (progressCircle, progressContent) => ({\n  effect: 'cube',\n  loop: true,\n  keyboard: {\n    enabled: true,\n  },\n  autoplay: {\n    delay: 5000,\n    disableOnInteraction: false,\n    pauseOnMouseEnter: true,\n  },\n  on: {\n    autoplayTimeLeft(s, time, progress) {\n      progressCircle.style.setProperty('--progress', 1 - progress);\n      progressContent.textContent = `${Math.ceil(time / 1000)}s`;\n    },\n  },\n  grabCursor: true,\n  cubeEffect: {\n    shadow: true,\n    slideShadows: true,\n    shadowOffset: 20,\n    shadowScale: 0.94,\n  },\n  pagination: {\n    el: '.swiper-pagination',\n    clickable: true,\n  },\n});\n\nconst createMarkupMovieList = movies => `\n\n      <div class=\"swiper-wrapper\">\n        ${movies.map(movie => createMarkupMovieItem(movie)).join('')}\n      </div>\n      <div class=\"swiper-pagination\"></div>\n      <div class=\"autoplay-progress\">\n      <svg viewBox=\"0 0 48 48\">\n        <circle cx=\"24\" cy=\"24\" r=\"20\"></circle>\n      </svg>\n      <span></span>\n    </div>\n    `;\n\nconst createMarkupMovieItem = ({\n  id,\n  backdrop_path,\n  original_title,\n  overview,\n  vote_average,\n}) => `\n    <div class=\"swiper-slide\">\n\n        <img class=\"hero-background-img\n        ${getBgImg(backdrop_path, backdrop_path, original_title)}/>\n      \n      <div class=\"container\">\n        <div class=\"hero-text-wrap\">\n          <h1 class=\" hero-title\">${original_title}</h1>\n          <div class=\"hero-movie-rating\">\n            ${ratingStarsMarkup(vote_average * 10)}\n          </div>\n          <p class=\" hero-text\">${overview}</p>\n        </div>\n\n        <div class=\"hero-button-wrap\">\n        <button data-movie_id_for_trailer=${id}\n            type=\"button\" class=\"js-button-show-trailer button-accent\">\n              Watch trailer\n          </button>\n          <button data-movie_id_for_modal=${id}\n            type=\"button\" class=\"button-light-theme\">\n              More details\n          </button>\n        </div>\n\n      </div>\n    </div>`;\n\nfunction getBgImg(backdropPoster, title) {\n  if (backdropPoster === null || !backdropPoster) {\n    return `src='${defaultImg}' alt='${title}'`;\n  }\n\n  return ` srcset=\"\n          https://image.tmdb.org/t/p/w1280${backdropPoster} 1280w,\n          https://image.tmdb.org/t/p/w780${backdropPoster}  280w\n        \"\n        src=\"https://image.tmdb.org/t/p/original${backdropPoster}\"\n        sizes=\" (min-width: 768px) 704px, (min-width: 320px) 280px, 100vw\"\n        alt=\"${title}\"`;\n}\n","import { TMDB_API, TMDB_APIi } from '../../api/themoviedbAPI';\nimport { markupBtnLoadMore } from '../../components/button-load-more';\nimport { markupErrorMessageSearch } from '../../components/error-message-search';\nimport { Loader } from '../../components/loader';\nimport { markupPagination } from '../../components/markup-pagimation';\nimport { createMarkupMovieList } from '../../components/movie-list';\n\nconst themoviedbAPI = new TMDB_API();\n\nconst catalogMovieList = document.querySelector('.js-catalog-movie-list');\nconst formButtonClose = document.querySelector(\n  '.js-catalog-search-form-button-close'\n);\n\ngetMovieList('week-movies');\n\nasync function getMovieList(action) {\n  try {\n    Loader.onShow();\n\n    if (action === 'week-movies') {\n      const response = await themoviedbAPI.getTrendMovieByParam('week');\n      const genresList = await themoviedbAPI.getGenresList();\n      updateGallery(response, genresList);\n    } else if (action === 'query-movies') {\n      const response = await themoviedbAPI.searchMovieByQuery();\n      const genresList = await themoviedbAPI.getGenresList();\n      updateGallery(response, genresList);\n    }\n  } catch (error) {\n    console.log('Error:', error);\n  }\n  Loader.onClose();\n}\n\nconst updateGallery = (response, genresList) => {\n  const { results, page: currentPage, total_pages, total_results } = response;\n\n  const catalogPaginationEl = document.querySelector('.js-catalog-pagination');\n\n  if (results.length === 0) {\n    catalogPaginationEl.innerHTML = '';\n    catalogMovieList.innerHTML = markupErrorMessageSearch();\n    return;\n  }\n\n  if (currentPage < total_pages) {\n    catalogPaginationEl.innerHTML = markupBtnLoadMore() + markupPagination();\n    document\n      .querySelector('.js-load-more')\n      .addEventListener('click', handlerLoadMoreClick);\n  } else {\n    catalogPaginationEl.innerHTML = '';\n  }\n\n  if (themoviedbAPI.page === 1) catalogMovieList.innerHTML = '';\n\n  catalogMovieList.insertAdjacentHTML(\n    'beforeend',\n    createMarkupMovieList(results, genresList)\n  );\n};\n\nconst formEl = document.querySelector('.js-catalog-search-form');\nconst { query, queryText, select } = formEl.elements;\n\nquery.addEventListener('input', () => {\n  formButtonClose.classList.remove('is-hidden');\n  queryText.placeholder = query.value;\n  if (query.value === '') formButtonClose.classList.add('is-hidden');\n});\n\nformButtonClose.addEventListener('click', () => {\n  formButtonClose.classList.add('is-hidden');\n  query.value = '';\n  queryText.placeholder = 'Film';\n});\n\nformEl.addEventListener('submit', handlerSubmit);\n\nfunction handlerSubmit(e) {\n  e.preventDefault();\n  themoviedbAPI.page = 1;\n\n  if (\n    themoviedbAPI.query === query.value &&\n    themoviedbAPI.year === select.value\n  )\n    return;\n\n  if (query.value.trim() === '') return;\n  if (select.value !== '') themoviedbAPI.year = select.value;\n\n  themoviedbAPI.query = query.value;\n\n  getMovieList('query-movies');\n}\n\nfunction handlerLoadMoreClick() {\n  themoviedbAPI.page += 1;\n  if (themoviedbAPI.query === '') {\n    getMovieList('week-movies');\n  } else {\n    getMovieList('query-movies');\n  }\n}\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"18ZJf\")).toString();","import comingSoonImg from '../../images/default-image-for-movie.webp';\nimport { ratingStarsMarkup } from './rating-stars';\n\nexport const createMarkupMovieList = (movieList, genresList) =>\n  movieList\n    .map(\n      ({\n        id,\n        poster_path,\n        genre_ids,\n        original_title,\n        release_date,\n        vote_average,\n      }) => `\n        <li data-movie_id_for_modal=\"${id}\" class=\"movie-card\">\n          <img\n          ${getImg(poster_path, original_title)}\n          class=\"movie-card-img\"\n          width=\"280\"\n          height=\"406\"\n          />\n          <div class=\"movie-card-wrapper\">\n              <h2 class=\"movie-card-title\">${original_title}</h2>\n              <p class=\"movie-card-text\">\n                ${getGenre(genre_ids, genresList)} | ${release_date.slice(0, 4)}\n              </p>\n              <div class=\"movie-card-rating\">\n              ${ratingStarsMarkup(vote_average * 10)}\n              </div>\n          </div>\n        </li>\n       `\n    )\n    .join('');\n\nfunction getGenre(genreIds, genresList) {\n  let genre = '';\n  if (genreIds?.length === 0) {\n    genre = 'Unknown Genre';\n  } else if (genreIds) {\n    genre = getGenreName(genreIds, genresList).slice(0, 1).join(' ');\n  }\n\n  return genre;\n}\n\nfunction getGenreName(ids, genresList) {\n  try {\n    return ids.map(id => {\n      const genre = genresList.find(genre => genre.id === id);\n      return genre ? genre.name : null;\n    });\n  } catch (error) {\n    return ['Unknown Genre'];\n  }\n}\n\nfunction getImg(poster, title) {\n  if (poster === null || !poster) {\n    return `src='${comingSoonImg}' alt='${title}'`;\n  }\n\n  return `\n    srcset=\"\n    https://image.tmdb.org/t/p/w300/${poster} 342w,\n    https://image.tmdb.org/t/p/w500/${poster} 500w\n            \"\n       src=\"https://image.tmdb.org/t/p/w500/${poster}\"\n     sizes=\"(min-width: 768px) 500px, (min-width: 480px) 342px, (min-width: 320px) 185px, 100vw\"   \n     alt='${title}'`;\n}\n","export const markupErrorMessageSearch = () =>\n  `\n    <p class=\"catalog-message\">\n        <span>OOPS...</span>\n        <span>We are very sorry!</span>\n        <span>We don’t have any results matching your search.</span>\n    </p >\n    `;\n"],"names":["parcelRequire","register","JSON","parse","$2576c8ea8628cc37$export$1b12aeaaf8caa4ab","rating","$ad79beeecdb188db$exports","URL","resolve","import","meta","url","toString","$770740dca78365cc$export$3b0d6d7590275603","document","body","insertAdjacentHTML","querySelector","remove","$4bae74e8f08ddbf9$var$themoviedbAPI","$hAgMS","TMDB_API","async","onShow","results","getTrendMovieByParam","correctList","slice","innerHTML","$4bae74e8f08ddbf9$var$createMarkupMovieList","$4ss66","addEventListenerByOpenTrailer","progressCircle","progressContent","Swiper","$4bae74e8f08ddbf9$var$swiperOption","error","console","log","onClose","$4bae74e8f08ddbf9$var$getTrendMovieOfDay","effect","loop","keyboard","enabled","autoplay","delay","disableOnInteraction","pauseOnMouseEnter","on","autoplayTimeLeft","s","time","progress","style","setProperty","textContent","Math","ceil","grabCursor","cubeEffect","shadow","slideShadows","shadowOffset","shadowScale","pagination","el","clickable","movies","map","movie","$4bae74e8f08ddbf9$var$createMarkupMovieItem","join","id","backdrop_path","original_title","overview","vote_average","backdropPoster","title","$parcel$interopDefault","$bae64ca18b41d1c4$exports","$5e585a176889998c$export$948bae64fe35076f","movieList","genresList","poster_path","genre_ids","release_date","poster","genreIds","genre","length","ids","genre1","find","name","$5e585a176889998c$var$getGenreName","$5e585a176889998c$var$getGenre","$0ededb09e3b7ab13$var$themoviedbAPI","$0ededb09e3b7ab13$var$catalogMovieList","$0ededb09e3b7ab13$var$formButtonClose","$0ededb09e3b7ab13$var$getMovieList","action","response","getGenresList","$0ededb09e3b7ab13$var$updateGallery","searchMovieByQuery","page","currentPage","total_pages","total_results","catalogPaginationEl","addEventListener","$0ededb09e3b7ab13$var$handlerLoadMoreClick","$0ededb09e3b7ab13$var$formEl","query","$0ededb09e3b7ab13$var$query","queryText","$0ededb09e3b7ab13$var$queryText","select","$0ededb09e3b7ab13$var$select","elements","classList","placeholder","value","add","e","preventDefault","year","trim"],"version":3,"file":"catalog.2be9dd34.js.map"}