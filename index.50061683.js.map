{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/runtime-1bc617d1275fb71b.js","src/js/pages/home/weekly-trends.js","src/js/components/loader.js","node_modules/@parcel/runtime-js/lib/runtime-753d01ae35071b3b.js","src/js/components/rating-stars.js","src/js/components/movie-list.js","src/js/pages/home/upcoming-this-month.js","node_modules/@parcel/runtime-js/lib/runtime-6b5975ecc88c3851.js"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"EVgbq\\\":\\\"index.50061683.js\\\",\\\"gVEw5\\\":\\\"default_horizontal_poster_path.736ae198.jpg\\\",\\\"aI1lb\\\":\\\"default-image-for-movie.30fb3bbd.webp\\\",\\\"7mVsD\\\":\\\"catalog.5008c276.css\\\",\\\"30zUr\\\":\\\"catalog.972401f2.js\\\"}\"));","import { TMDB_API } from '../../api/themoviedbAPI';\nimport { Loader } from '../../components/loader';\n\nimport { createMarkupMovieList } from '../../components/movie-list';\n\nconst getTrendMovieOfWeek = async () => {\n  try {\n    Loader.onShow();\n    const response = await TMDB_API.getTrendMovieByParam('week');\n    const genresList = await TMDB_API.getGenresList();\n    const correctList = response.slice(0, 3);\n\n    document.querySelector('.js-home-weekly-trends-movie-list').innerHTML =\n      createMarkupMovieList(correctList, genresList);\n  } catch (error) {\n    console.log('Error:', error);\n  }\n  Loader.onClose();\n};\n\ngetTrendMovieOfWeek();\n","const onShow = () => {\n  document.body.insertAdjacentHTML(\n    'beforeend',\n    `<div class=\"backdrop-loader\">\n  <div class=\"lds-dual-ring\"></div>\n</div>`\n  );\n};\n\nconst onClose = () => {\n  document.querySelector('.backdrop-loader').remove();\n};\n\nexport const Loader = { onShow, onClose };\n","module.exports = require('./helpers/bundle-url').getBundleURL('EVgbq') + require('./helpers/bundle-manifest').resolve(\"aI1lb\");","export const ratingStarsMarkup = rating => {\n  return `\n  <div class=\"rating-container\">\n    <div class=\"star-empty\"></div>\n    <div style=\" width:${rating}%;\"  class=\"star-full\"></div>\n  </div>`;\n};\n","import comingSoonImg from '../../images/default-image-for-movie.webp';\nimport { ratingStarsMarkup } from './rating-stars';\n\nexport const createMarkupMovieList = (\n  movieList,\n  genresList\n) => `<ul class=\"movie-list\">\n${movieList\n  .map(\n    ({\n      id,\n      poster_path,\n      genre_ids,\n      original_title,\n      release_date,\n      vote_average,\n    }) => `\n        <li data-movie_id=\"${id}\" class=\"movie-card\">\n          <img\n          ${getImg(poster_path, original_title)}\n          class=\"movie-card-img\"\n          width=\"280\"\n          height=\"406\"\n          />\n          <div class=\"movie-card-wrapper\">\n              <h2 class=\"movie-card-title\">${original_title}</h2>\n              <p class=\"movie-card-text\">\n                ${getGenre(genre_ids, genresList)} | ${release_date.slice(0, 4)}\n              </p>\n              <div class=\"movie-card-rating\">\n              ${ratingStarsMarkup(vote_average * 10)}\n              </div>\n          </div>\n        </li>\n       `\n  )\n  .join('')}\n\n</ul>`;\n// movieList\n//   .map(\n//     ({\n//       id,\n//       poster_path,\n//       genre_ids,\n//       original_title,\n//       release_date,\n//       vote_average,\n//     }) => `\n//         <li data-movie_id=\"${id}\" class=\"movie-card\">\n//           <img\n//           ${getImg(poster_path, original_title)}\n//           class=\"movie-card-img\"\n//           width=\"280\"\n//           height=\"406\"\n//           />\n//           <div class=\"movie-card-wrapper\">\n//               <h2 class=\"movie-card-title\">${original_title}</h2>\n//               <p class=\"movie-card-text\">\n//                 ${getGenre(genre_ids, genresList)} | ${release_date.slice(0, 4)}\n//               </p>\n//               <div class=\"movie-card-rating\">\n//               ${ratingStarsMarkup(vote_average * 10)}\n//               </div>\n//           </div>\n//         </li>\n//        `\n//   )\n//   .join('');\n\nfunction getGenre(genreIds, genresList) {\n  let genre = '';\n  if (genreIds?.length === 0) {\n    genre = 'Unknown Genre';\n  } else if (genreIds) {\n    genre = getGenreName(genreIds, genresList).slice(0, 1).join(' ');\n  }\n\n  return genre;\n}\n\nfunction getGenreName(ids, genresList) {\n  try {\n    return ids.map(id => {\n      const genre = genresList.find(genre => genre.id === id);\n      return genre ? genre.name : null;\n    });\n  } catch (error) {\n    return ['Unknown Genre'];\n  }\n}\n\nfunction getImg(poster, title) {\n  if (poster === null || !poster) {\n    return `src='${comingSoonImg}' alt='${title}'`;\n  }\n\n  return `\n    srcset=\"\n    https://image.tmdb.org/t/p/w300/${poster} 342w,\n    https://image.tmdb.org/t/p/w500/${poster} 500w\n            \"\n       src=\"https://image.tmdb.org/t/p/w500/${poster}\"\n     sizes=\"(min-width: 768px) 500px, (min-width: 480px) 342px, (min-width: 320px) 185px, 100vw\"   \n     alt='${title}'`;\n}\n","import { TMDB_API } from '../../api/themoviedbAPI';\nimport comingSoonImg from '../../../images/default-image-for-movie.webp';\nimport defaultImg from '../../../images/default_horizontal_poster_path.jpg';\nimport { ServiceAddRemoveBtn } from '../../services/add-remove-movie';\n\ngetNewFilms();\n\nasync function getNewFilms() {\n  try {\n    const movie = await TMDB_API.getUpcomingFilms();\n\n    document.querySelector('.home-upcoming-this-month-wrapper').innerHTML =\n      createUpcomingMovieMarkup(movie);\n\n    const addRemoveBtn = document.querySelector('.js-add-remove-btn');\n    const serviceAddRemoveBtn = new ServiceAddRemoveBtn(addRemoveBtn, movie);\n    serviceAddRemoveBtn.setButtonName();\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction createUpcomingMovieMarkup({\n  backdrop_path,\n  original_title,\n  release_date,\n  vote_average,\n  vote_count,\n  popularity,\n  genres,\n  overview,\n  poster_path,\n}) {\n  return `\n    <img\n        class=\"home-upcoming-this-month-img\"\n        loading=\"lazy\"\n        width=\"280\"\n        height=\"402\"\n        ${getImg(poster_path, backdrop_path, original_title)}\n      />\n\n      <div>\n        <h3 class=\"home-upcoming-movie-title\">${original_title}</h3>\n        <div class=\"home-upcoming-movie-details-wrapper\">\n          <p class=\"home-upcoming-movie-details-names\">Release date</p>\n          <p class=\"home-upcoming-movie-detail-date\">${release_date}</p>\n          <p class=\"home-upcoming-movie-details-names\">Vote / Votes</p>\n          <p class=\"home-upcoming-movie-detail-vote\">\n            <span>${vote_average.toFixed(1)}</span> / <span>${vote_count}</span>\n          </p>\n          <p class=\"home-upcoming-movie-details-names\">Popularity</p>\n          <p class=\"home-upcoming-movie-detail-popularity\">${popularity}</p>\n          <p class=\"home-upcoming-movie-details-names\">Genre</p>\n          <p class=\"home-upcoming-movie-detail-genre\">${allGenres(genres)}\n          </p>\n        </div>\n        <p class=\"home-upcoming-movie-desc-title\">About</p>\n        <p class=\"home-upcoming-movie-desc\">\n          ${overview}\n        </p>\n\n        <button class=\"js-add-remove-btn button-accent\">Add to my library</button>\n      </div>`;\n}\n\nfunction allGenres(genres) {\n  return genres.map(({ name }) => name).join(', ');\n}\n\nfunction getImg(poster, backdropPoster, title) {\n  if (poster === null || !poster) {\n    return `src='${comingSoonImg}' alt='${title}'`;\n  }\n  if (backdropPoster === null || !backdropPoster) {\n    return `src='${defaultImg}' alt='${title}'`;\n  }\n\n  return ` srcset=\"\n          https://image.tmdb.org/t/p/w1280${backdropPoster} 1280w,\n          https://image.tmdb.org/t/p/w342${poster}  280w\n        \"\n        src=\"https://image.tmdb.org/t/p/original${poster}\"\n        sizes=\" (min-width: 768px) 704px, (min-width: 320px) 280px, 100vw\"\n        alt=\"${title}\"`;\n}\n","module.exports = require('./helpers/bundle-url').getBundleURL('EVgbq') + require('./helpers/bundle-manifest').resolve(\"gVEw5\");"],"names":["parcelRequire","register","JSON","parse","$bpxeT","$db576fa6837b6c10$export$3b0d6d7590275603","onShow","document","body","insertAdjacentHTML","onClose","querySelector","remove","$3dc41381675155e2$exports","getBundleURL","resolve","$ef2be68b84ad4c0a$export$948bae64fe35076f","movieList","genresList","concat","map","param","poster","title","id","poster_path","genre_ids","original_title","release_date","vote_average","$parcel$interopDefault","genreIds","genre","length","ids","genre1","find","name","error","$ef2be68b84ad4c0a$var$getGenreName","slice","join","$ef2be68b84ad4c0a$var$getGenre","$b8136e79777b5feb$var$getTrendMovieOfWeek","$2TvXO","mark","_callee","response","correctList","$lpiv7","TMDB_API","getTrendMovieByParam","_ctx","sent","getGenresList","innerHTML","console","log","t0","$9ab86a604b3f214a$exports","$e62ad7fb5543dbf3$var$_getNewFilms","movie","addRemoveBtn","getUpcomingFilms","$e62ad7fb5543dbf3$var$createUpcomingMovieMarkup","$b6q5k","ServiceAddRemoveBtn","setButtonName","apply","this","arguments","backdropPoster","backdrop_path","vote_count","popularity","genres","overview","toFixed","$e62ad7fb5543dbf3$var$allGenres","$e62ad7fb5543dbf3$var$getNewFilms"],"version":3,"file":"index.50061683.js.map"}