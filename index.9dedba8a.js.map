{"mappings":"qhBAAAA,EAAA,SAAAC,SAA8CC,KAAKC,MAAM,0R,4CCAzD,IAAAC,EAAAJ,EAAA,SCAA,MAaaK,EAAS,C,OAbP,KACbC,SAASC,KAAKC,mBACZ,YACA,6EAGD,E,QAGa,KACdF,SAASG,cAAc,oBAAoBC,QAAQ,G,MCVrDC,EAAiB,IAAAC,IAAoBZ,EAAA,SAAAa,QAA6C,SAAQC,OAAAC,KAAAC,KAAEC,WCArF,MCGMC,EAAwB,CACnCC,EACAC,IACG,4BACHD,EACCE,KACC,EAACC,GACCA,EAAEC,YACFA,EAAWC,UACXA,EAASC,eACTA,EAAcC,aACdA,EAAYC,aACZA,MACI,sCACmBL,qDA2EbM,EAzEGL,EAyEKM,EAzEQJ,EA0Ef,OAAXG,GAAoBA,EAIjB,uDAE6BA,gDACAA,sEAEQA,sHAElCC,KAVD,QAAQC,EAAAnB,YAAuBkB,+LArEGJ,sEA6C7C,SAAkBM,EAAUX,GAC1B,IAAIY,EAAQ,GACa,IAArBD,GAAUE,OACZD,EAAQ,gBACCD,IACTC,EAMJ,SAAsBE,EAAKd,GACzB,IACE,OAAOc,EAAIb,KAAIC,IACb,MAAMa,EAAQf,EAAWgB,MAAKJ,GAASA,EAAMV,KAAOA,IACpD,OAAOa,EAAQA,EAAME,KAAO,IAAI,G,CAElC,MAAOC,GACP,MAAO,CAAC,gB,EAbAC,CAAaR,EAAUX,GAAYoB,MAAM,EAAG,GAAGC,KAAK,MAG9D,OAAOT,C,CAnDSU,CAASlB,EAAWJ,QAAiBM,EAAac,MAAM,EAAG,wFD3B5CG,EC8BgB,GAAfhB,ED7BzB,kGAGgBgB,6GAJQ,IAAAA,EC4FjBf,EAAQC,CA1DhB,IAELY,KAAK,eJ/BoBG,WAC1B,IACEvC,EAAOwC,SACP,MAAMC,QAAiB1C,EAAA2C,SAASC,qBAAqB,QAC/C5B,QAAmBhB,EAAA2C,SAASE,gBAC5BC,EAAcJ,EAASN,MAAM,EAAG,GAEtClC,SAASG,cAAc,qCAAqC0C,UAC1DjC,EAAsBgC,EAAa9B,E,CACrC,MAAOkB,GACPc,QAAQC,IAAI,SAAUf,E,CAExBjC,EAAOiD,SAAS,EAGlBC,GKpBA,I,EAAAnD,EAAAJ,EAAA,SCAAwD,EAAiB,IAAA5C,IAAoBZ,EAAA,SAAAa,QAA6C,SAAQC,OAAAC,KAAAC,KAAEC,W,kBDO5F2B,iBACE,IACE,MAAMa,QAAcrD,EAAA2C,SAASW,mBAE7BpD,SAASG,cAAc,qCAAqC0C,UAWhE,UAAmCQ,cACjCA,EAAalC,eACbA,EAAcC,aACdA,EAAYC,aACZA,EAAYiC,WACZA,EAAUC,WACVA,EAAUC,OACVA,EAAMC,SACNA,EAAQxC,YACRA,IAEA,MAAO,wIAqCOK,EA/BCL,EA+BOyC,EA/BML,EA+BU9B,EA/BKJ,EAgC5B,OAAXG,GAAoBA,EAGD,OAAnBoC,GAA4BA,EAIzB,wDACmCA,sDACDpC,uEAEOA,gGAEnCC,KATJ,QAAQC,EAAA0B,YAAoB3B,KAH5B,QAAQC,EAAAnB,YAAuBkB,gFA7BMJ,oMAGOC,4JAGnCC,EAAasC,QAAQ,qBAAqBL,+JAGDC,kIAc7D,SAAmBC,GACjB,OAAOA,EAAOzC,KAAI,EAACgB,KAAEA,KAAWA,IAAMI,KAAK,K,CAbWyB,CAAUJ,4JAKtDC,sHAWZ,IAAgBnC,EAAQoC,EAAgBnC,C,CA1DlCsC,CAA0BV,GAE5B,MAAMW,EAAe9D,SAASG,cAAc,sBAChB,IAAI,EAAA4D,EAAAC,qBAAoBF,EAAcX,GAC9Cc,e,CACpB,MAAOjC,GACPc,QAAQC,IAAIf,E,EAbhBkC","sources":["node_modules/@parcel/runtime-js/lib/runtime-f3d83d09cec5582f.js","src/js/pages/home/weekly-trends.js","src/js/components/loader.js","node_modules/@parcel/runtime-js/lib/runtime-97fc02d64485cc87.js","src/js/components/rating-stars.js","src/js/components/movie-list.js","src/js/pages/home/upcoming-this-month.js","node_modules/@parcel/runtime-js/lib/runtime-a13326a1c56907f8.js"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"5ZPII\\\":\\\"index.9dedba8a.js\\\",\\\"jMrmu\\\":\\\"default_horizontal_poster_path.736ae198.jpg\\\",\\\"18ZJf\\\":\\\"default-image-for-movie.30fb3bbd.webp\\\",\\\"7mVsD\\\":\\\"catalog.5008c276.css\\\",\\\"kJsjH\\\":\\\"catalog.8d1e14d4.js\\\"}\"));","import { TMDB_API } from '../../api/themoviedbAPI';\nimport { Loader } from '../../components/loader';\n\nimport { createMarkupMovieList } from '../../components/movie-list';\n\nconst getTrendMovieOfWeek = async () => {\n  try {\n    Loader.onShow();\n    const response = await TMDB_API.getTrendMovieByParam('week');\n    const genresList = await TMDB_API.getGenresList();\n    const correctList = response.slice(0, 3);\n\n    document.querySelector('.js-home-weekly-trends-movie-list').innerHTML =\n      createMarkupMovieList(correctList, genresList);\n  } catch (error) {\n    console.log('Error:', error);\n  }\n  Loader.onClose();\n};\n\ngetTrendMovieOfWeek();\n","const onShow = () => {\n  document.body.insertAdjacentHTML(\n    'beforeend',\n    `<div class=\"backdrop-loader\">\n  <div class=\"lds-dual-ring\"></div>\n</div>`\n  );\n};\n\nconst onClose = () => {\n  document.querySelector('.backdrop-loader').remove();\n};\n\nexport const Loader = { onShow, onClose };\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"18ZJf\")).toString();","export const ratingStarsMarkup = rating => {\n  return `\n  <div class=\"rating-container\">\n    <div class=\"star-empty\"></div>\n    <div style=\" width:${rating}%;\"  class=\"star-full\"></div>\n  </div>`;\n};\n","import comingSoonImg from '../../images/default-image-for-movie.webp';\nimport { ratingStarsMarkup } from './rating-stars';\n\nexport const createMarkupMovieList = (\n  movieList,\n  genresList\n) => `<ul class=\"movie-list\">\n${movieList\n  .map(\n    ({\n      id,\n      poster_path,\n      genre_ids,\n      original_title,\n      release_date,\n      vote_average,\n    }) => `\n        <li data-movie_id=\"${id}\" class=\"movie-card\">\n          <img\n          ${getImg(poster_path, original_title)}\n          class=\"movie-card-img\"\n          width=\"280\"\n          height=\"406\"\n          />\n          <div class=\"movie-card-wrapper\">\n              <h2 class=\"movie-card-title\">${original_title}</h2>\n              <p class=\"movie-card-text\">\n                ${getGenre(genre_ids, genresList)} | ${release_date.slice(0, 4)}\n              </p>\n              <div class=\"movie-card-rating\">\n              ${ratingStarsMarkup(vote_average * 10)}\n              </div>\n          </div>\n        </li>\n       `\n  )\n  .join('')}\n\n</ul>`;\n// movieList\n//   .map(\n//     ({\n//       id,\n//       poster_path,\n//       genre_ids,\n//       original_title,\n//       release_date,\n//       vote_average,\n//     }) => `\n//         <li data-movie_id=\"${id}\" class=\"movie-card\">\n//           <img\n//           ${getImg(poster_path, original_title)}\n//           class=\"movie-card-img\"\n//           width=\"280\"\n//           height=\"406\"\n//           />\n//           <div class=\"movie-card-wrapper\">\n//               <h2 class=\"movie-card-title\">${original_title}</h2>\n//               <p class=\"movie-card-text\">\n//                 ${getGenre(genre_ids, genresList)} | ${release_date.slice(0, 4)}\n//               </p>\n//               <div class=\"movie-card-rating\">\n//               ${ratingStarsMarkup(vote_average * 10)}\n//               </div>\n//           </div>\n//         </li>\n//        `\n//   )\n//   .join('');\n\nfunction getGenre(genreIds, genresList) {\n  let genre = '';\n  if (genreIds?.length === 0) {\n    genre = 'Unknown Genre';\n  } else if (genreIds) {\n    genre = getGenreName(genreIds, genresList).slice(0, 1).join(' ');\n  }\n\n  return genre;\n}\n\nfunction getGenreName(ids, genresList) {\n  try {\n    return ids.map(id => {\n      const genre = genresList.find(genre => genre.id === id);\n      return genre ? genre.name : null;\n    });\n  } catch (error) {\n    return ['Unknown Genre'];\n  }\n}\n\nfunction getImg(poster, title) {\n  if (poster === null || !poster) {\n    return `src='${comingSoonImg}' alt='${title}'`;\n  }\n\n  return `\n    srcset=\"\n    https://image.tmdb.org/t/p/w300/${poster} 342w,\n    https://image.tmdb.org/t/p/w500/${poster} 500w\n            \"\n       src=\"https://image.tmdb.org/t/p/w500/${poster}\"\n     sizes=\"(min-width: 768px) 500px, (min-width: 480px) 342px, (min-width: 320px) 185px, 100vw\"   \n     alt='${title}'`;\n}\n","import { TMDB_API } from '../../api/themoviedbAPI';\nimport comingSoonImg from '../../../images/default-image-for-movie.webp';\nimport defaultImg from '../../../images/default_horizontal_poster_path.jpg';\nimport { ServiceAddRemoveBtn } from '../../services/add-remove-movie';\n\ngetNewFilms();\n\nasync function getNewFilms() {\n  try {\n    const movie = await TMDB_API.getUpcomingFilms();\n\n    document.querySelector('.home-upcoming-this-month-wrapper').innerHTML =\n      createUpcomingMovieMarkup(movie);\n\n    const addRemoveBtn = document.querySelector('.js-add-remove-btn');\n    const serviceAddRemoveBtn = new ServiceAddRemoveBtn(addRemoveBtn, movie);\n    serviceAddRemoveBtn.setButtonName();\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction createUpcomingMovieMarkup({\n  backdrop_path,\n  original_title,\n  release_date,\n  vote_average,\n  vote_count,\n  popularity,\n  genres,\n  overview,\n  poster_path,\n}) {\n  return `\n    <img\n        class=\"home-upcoming-this-month-img\"\n        loading=\"lazy\"\n        width=\"280\"\n        height=\"402\"\n        ${getImg(poster_path, backdrop_path, original_title)}\n      />\n\n      <div>\n        <h3 class=\"home-upcoming-movie-title\">${original_title}</h3>\n        <div class=\"home-upcoming-movie-details-wrapper\">\n          <p class=\"home-upcoming-movie-details-names\">Release date</p>\n          <p class=\"home-upcoming-movie-detail-date\">${release_date}</p>\n          <p class=\"home-upcoming-movie-details-names\">Vote / Votes</p>\n          <p class=\"home-upcoming-movie-detail-vote\">\n            <span>${vote_average.toFixed(1)}</span> / <span>${vote_count}</span>\n          </p>\n          <p class=\"home-upcoming-movie-details-names\">Popularity</p>\n          <p class=\"home-upcoming-movie-detail-popularity\">${popularity}</p>\n          <p class=\"home-upcoming-movie-details-names\">Genre</p>\n          <p class=\"home-upcoming-movie-detail-genre\">${allGenres(genres)}\n          </p>\n        </div>\n        <p class=\"home-upcoming-movie-desc-title\">About</p>\n        <p class=\"home-upcoming-movie-desc\">\n          ${overview}\n        </p>\n\n        <button class=\"js-add-remove-btn button-accent\">Add to my library</button>\n      </div>`;\n}\n\nfunction allGenres(genres) {\n  return genres.map(({ name }) => name).join(', ');\n}\n\nfunction getImg(poster, backdropPoster, title) {\n  if (poster === null || !poster) {\n    return `src='${comingSoonImg}' alt='${title}'`;\n  }\n  if (backdropPoster === null || !backdropPoster) {\n    return `src='${defaultImg}' alt='${title}'`;\n  }\n\n  return ` srcset=\"\n          https://image.tmdb.org/t/p/w1280${backdropPoster} 1280w,\n          https://image.tmdb.org/t/p/w342${poster}  280w\n        \"\n        src=\"https://image.tmdb.org/t/p/original${poster}\"\n        sizes=\" (min-width: 768px) 704px, (min-width: 320px) 280px, 100vw\"\n        alt=\"${title}\"`;\n}\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"jMrmu\")).toString();"],"names":["parcelRequire","register","JSON","parse","$hAgMS","$770740dca78365cc$export$3b0d6d7590275603","document","body","insertAdjacentHTML","querySelector","remove","$bae64ca18b41d1c4$exports","URL","resolve","import","meta","url","toString","$5e585a176889998c$export$948bae64fe35076f","movieList","genresList","map","id","poster_path","genre_ids","original_title","release_date","vote_average","poster","title","$parcel$interopDefault","genreIds","genre","length","ids","genre1","find","name","error","$5e585a176889998c$var$getGenreName","slice","join","$5e585a176889998c$var$getGenre","rating","async","onShow","response","TMDB_API","getTrendMovieByParam","getGenresList","correctList","innerHTML","console","log","onClose","$9e73b92f7e8e1d20$var$getTrendMovieOfWeek","$ad79beeecdb188db$exports","movie","getUpcomingFilms","backdrop_path","vote_count","popularity","genres","overview","backdropPoster","toFixed","$03a16afead21f22e$var$allGenres","$03a16afead21f22e$var$createUpcomingMovieMarkup","addRemoveBtn","$lq6pi","ServiceAddRemoveBtn","setButtonName","$03a16afead21f22e$var$getNewFilms"],"version":3,"file":"index.9dedba8a.js.map"}